# API

## **PossessedStockInfo**

## **Secuirty/Capital account**

### AccountInfo

```
string getAccountID()
string getAccountPassword(string ID)
```
This function is to get the capital account information, so that users can modify the password in the client and query the basic information of the account.

### ManagerInfo

```
string getManagerID()
string getManagerPassword()
```
This function is to obtain the basic login information of the administration, so that the admin can login, and then release or modify the basic information of the stock.

### UserInfo

```
string getUserID()
string getUserPassword()
```
This function is obtain the basic login information of the user, in order the the user can login in the client.

## **CentralTransactionSystem**

### getRealTimeData

```
hashtable getRealTimeData(void)
```
This function is to provide the dynamic data of all the stocks from Central Transaction System to the Information Publishing System. It returns a hashtable that contain all the real-time data of each stock of which the key value is the ID of the stock.

### TransactionCommand

```
int transactionCommand(string account_id, string security_id, string stock_code, int transaction_type, float submit_price, int submit_quantity)
```
This function is a trading instruction for the purchase and sale of the central trading system to issue a request
- account_id:	The capital account ID of the user want to transaction
- security_id:	The security account ID of the user want to transaction
- stock_code:	The code of the stock user want to buy or sell
- transaction_type:	Type of purchase or sale. 0 means buy, 1 means sell
- submit_price:	The price of stock that user submits
- submit_quantity:	The quantity of the stocks that user wants to buy or sell

and returns the result of the instruction, 0 means succeed in resting order, 1 means the price is not available, 2 means the market closed, 3 means the money is not enough when buying, -1 means other problems.

### TransactionRecord

```
array getTransactionRecord(string account_id, date inquired_date)
```
This function is used to get transaction records of the user that day.
- inquired_date:	The date of the inquired transaction record.
- accout_id:	capital account id

and returns the array of record_id, transaction_dates, transaction_type, stock_id, stock_name, unit_prices, shares, the state of the record.

```
int recallTransaction(int record_id)
```
This function is used to recall uncompleted transaction records that day.
- record_id:	The id of transaction record

and returns the result of recall: 0 means no error, 1 means transaction done, 2 means stock market closing.

### StockTransactionStatus

```
int getStockTransactionStatus(string stock_id)
```
This function is used to know the transactions' status of one specified stock.
- stock_id: The id of the stock

and returns the result of the transactions' status:
- 0: Normal
- 1: Frozen
- 2: Error(Wrong ID)

```
int freezeStockTransaction(string stock_id)
```
This function is used to freeze the transactions of one specified stock.
- stock_id: The id of the stock

and return the result after the operation:
- 0: succeeded
- 1: failed: the stock is frozen
- 2: error: wrong stock_id

```
bool resumeStockTransaction(string stock_id)
```
This function is used to resume the frozen transactions of one specified stock.
- stock_id: The id of the stock

and return the result after the operation:
- 0: succeeded
- 1: failed: the stock status is normal
- 2: error: wrong stock_id

### ManagedStocksInfo

```
array getManagedStocksInfo(array managedStocks)
```
This function is used to know real-time information(price / transaction volume / change rate) of all stocks which are managed by one manager.
- manageStocks: an array including all managed stocks' id.

and return an array as result. Each item in the array should have three attributes:
- price
- volume
- change

### StockOrders
```
array getStockOrders(string stock_id)
```
This function is used to know the undone orders of one specified stock, Not history record but today's transactions orders.
- stock_id: the id of one specified stock

and return an array as result. The first item is an array including all purchase orders, and the second is also an array including all selling orders.


## **Information Release(Example)**

This modules is to manage the dynamic information for each stock and update the data in the memory real-time from the Central Transaction System modules for every 5 seconds. Besides it can provide the chart data for the Renderer part which programed in JavaScript.

### getStockName / getStockID

```
string getStockName(string ID)
string getStockID(string name)
```
These two function is to help users to transform between strock name and ID. It receives:
- ID: the stock ID for query
- name: the stock name for query

and returns the corresponding stock name and ID.


### SaveStockValue

```
int SaveStockValue(void)
```
This function is to save the statistics of all the stocks to the log file. It returns 1 while save successfully and returns 0 as failing.

### getStatistics

```
struct statistics getStatistics(name)
struct statistics getStatistics(ID)
```
This function is to obtain the dynamic data for the stock that the user want to consult. It receives name or ID as parameter:
- ID: the stock ID for query
- name: the stock name for query

and returns the statistics structure for ```Renderer``` to show.

### updateData

```
int updateData(void)
```
This function is to update the real-time data for each stock for every 5 seconds so that the user can see the dynamic  chart in visualization. It returns 1 if update successfully and 0 when fails.

## **Renderer**

This modules is programed in JavaScript that it will be called when the html is loaded. Its main function is to render the chart in visualization so that the user can get more details information from the website.

### render

```
void render(void)
```
This function is to render the chart for the user according to the present data structure in the memory, which can be set by users. It may update dynamically.

### setmode

```
void setmode(int type)
```
This function is enable user to change the mode of the chart, including showing the Candlestick charts for day, month or year. It receives:
- type: decides which mode of chart to render.

### updateTable

```
void updateTable()
```
This function is to update the data table so that it can renew the chart. It will visit the server synchronized and obtain new present information of the stock.
